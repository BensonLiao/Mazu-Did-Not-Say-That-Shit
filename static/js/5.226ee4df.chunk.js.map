{"version":3,"sources":["utils/dataSummary.js","components/ReactionTopMostIcon.js","components/ReactionSecondMostIcon.js","components/ReactionThirdMostIcon.js","components/FeedbackCount.js","components/ReactionSummary.js","hooks/useDataInit.js","containers/DisplayReactSummary.js","components/CommentAndShareSummary.js","containers/DisplayCommentAndShareSummary.js","components/FeedbackSummary.js"],"names":["__webpack_exports__","getRankingReactions","reactions","length","sortedReactions","Object","keys","REACTIONS","map","feeling","totalFeeling","filter","reactor","total","sort","a","b","_Users_bensonliao_mazudidnotsaythatshit_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","getReactionSummary","rank","this","summary","all","forText","forTip","topMost","secondMost","thirdMost","topMostTip","secondMostTip","thirdMostTip","topMostReactions","secondMostReactions","thirdMostReactions","textFormat","getReactionsCount","getFeedbacksCountTip","getCommentReactionSummary","getCommentReactionsCount","getCommentReactionsCountTip","COMMENT","appConst","component","ReactionTopMostIconWrapper","styled","div","_templateObject","styledTooltipOverrideStyle","props","getIconSize","withComponent","displayInlineBlock","TopMostIcon","i","_templateObject2","reactionIconBaseStyle","reactionIconSummaryStyle","reactionIconStyle","reactFeeling","tooltipId","ReactionTopMostIcon","_ref","countSummary","react__WEBPACK_IMPORTED_MODULE_1___default","createElement","data-for","data-tip","_StyledTooltip__WEBPACK_IMPORTED_MODULE_4__","id","effect","multiline","bg","cssConst","tooltipBackgroundBlack","defaultProps","LIKE","displayName","ReactionSecondMostIconWrapper","SecondMostIcon","ReactionSecondMostIcon","HAHA","ReactionThirdMostIconWrapper","ThirdMostIcon","ReactionThirdMostIcon","LOVE","FeedbackCountWrapper","span","FeedbackCount","type","concat","toLowerCase","react_default","StyledTooltip","ReactionSummaryWrapper","ReactionSummary_templateObject","displayFlex","alignCenter","DEFAULT","ReactionSummary","reactionIds","data","_useContextState","useContextState","isDataInit","setDataInit","useEffect","useDataInit","reactionArray","reactionSummary","dataSummary","components_FeedbackCount","connect","state","getReactionIds","getReactions","summaryFeedbacks","feedbacks","getFeedbacksCount","CommentAndShareSummaryWrapper","CommentAndShareSummary_templateObject","SharesWrapper","CommentAndShareSummary","commentIds","comments","shareIds","shares","commentArray","shareArray","commentsSummary","sharesSummary","getCommentIds","getComments","getShareIds","getShares","FeedbackSummaryWrapper","FeedbackSummary_templateObject","justifyContentSpaceBetween","infoColorGray","postSectionBorder","FeedbackSummary","DisplayReactSummary","DisplayCommentAndShareSummary"],"mappings":"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","file":"static/js/5.226ee4df.chunk.js","sourcesContent":["import { REACTIONS } from '../actions'\nimport textFormat from './textFormat'\n\nexport default {\n  getRankingReactions(reactions) {\n    if (reactions.length === 0) return []\n    const reactionsCount = Object.keys(REACTIONS).map(feeling => {\n      const totalFeeling = reactions.filter(\n        reactor => reactor.feeling === feeling\n      ).length\n      return { feeling, total: totalFeeling }\n    })\n    const sortedReactions = reactionsCount.sort((a, b) => {\n      return b.total - a.total\n    })\n    const rank = [...sortedReactions]\n    return rank\n  },\n  getReactionSummary(reactions) {\n    if (reactions.length === 0) return ''\n    const rank = this.getRankingReactions(reactions)\n    const summary = {\n      all: {\n        forText: '',\n        forTip: ''\n      },\n      topMost: rank[0],\n      secondMost: rank[1],\n      thirdMost: rank[2],\n      topMostTip: '',\n      secondMostTip: '',\n      thirdMostTip: ''\n    }\n    const topMostReactions = reactions.filter(\n      reactor => reactor.feeling === rank[0].feeling\n    )\n    const secondMostReactions = reactions.filter(\n      reactor => reactor.feeling === rank[1].feeling\n    )\n    const thirdMostReactions = reactions.filter(\n      reactor => reactor.feeling === rank[2].feeling\n    )\n    summary.all.forText = textFormat.getReactionsCount(reactions)\n    summary.all.forTip = textFormat.getFeedbacksCountTip(reactions, 18)\n    summary.topMostTip = textFormat.getFeedbacksCountTip(topMostReactions, 18)\n    summary.secondMostTip = textFormat.getFeedbacksCountTip(\n      secondMostReactions,\n      18\n    )\n    summary.thirdMostTip = textFormat.getFeedbacksCountTip(\n      thirdMostReactions,\n      18\n    )\n    return summary\n  },\n  getCommentReactionSummary(reactions) {\n    if (reactions.length === 0) return ''\n    const rank = this.getRankingReactions(reactions)\n    const summary = {\n      forText: '',\n      forTip: '',\n      topMost: rank[0],\n      secondMost: rank[1],\n      thirdMost: rank[2]\n    }\n    summary.forText = textFormat.getCommentReactionsCount(reactions)\n    summary.forTip = textFormat.getCommentReactionsCountTip(reactions, rank)\n    // console.log('summary.forTip', summary.forTip)\n    return summary\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport { REACTIONS } from '../actions'\nimport StyledTooltip from './StyledTooltip'\nimport appConst from '../utils/constants'\nimport cssConst from '../styles/constants'\nimport { displayInlineBlock } from '../styles/page'\nimport {\n  styledTooltipOverrideStyle,\n  getIconSize,\n  reactionIconBaseStyle,\n  reactionIconSummaryStyle,\n  reactionIconStyle\n} from '../styles/post'\n\nconst {\n  component: { COMMENT }\n} = appConst\n\nconst ReactionTopMostIconWrapper = styled.div`\n  ${styledTooltipOverrideStyle}\n  ${props => getIconSize(props.withComponent)}\n  ${props => props.withComponent === COMMENT && displayInlineBlock}\n  ${props => props.withComponent === COMMENT && 'border-right: 2px solid #fff;'}\n  position: relative;\n  margin-left: -2px;\n  z-index: 3;\n  vertical-align: top;\n`\n\nconst TopMostIcon = styled.i`\n  ${reactionIconBaseStyle}\n  ${reactionIconSummaryStyle}\n  ${props => reactionIconStyle(props.reactFeeling, props.withComponent)}\n`\n\nconst tooltipId = 'tip-for-post-first-most-reaction'\n\nconst ReactionTopMostIcon = ({ reactFeeling, withComponent, countSummary }) => {\n  return (\n    <ReactionTopMostIconWrapper\n      data-for={tooltipId}\n      data-tip={countSummary}\n      withComponent={withComponent}\n    >\n      <TopMostIcon reactFeeling={reactFeeling} withComponent={withComponent} />\n      {countSummary.length > 0 && (\n        <StyledTooltip\n          id={tooltipId}\n          effect=\"solid\"\n          multiline\n          bg={cssConst.tooltipBackgroundBlack}\n        />\n      )}\n    </ReactionTopMostIconWrapper>\n  )\n}\n\nReactionTopMostIcon.defaultProps = {\n  reactFeeling: REACTIONS.LIKE,\n  countSummary: ''\n}\n\nReactionTopMostIcon.propTypes = {\n  reactFeeling: PropTypes.oneOf(Object.keys(REACTIONS)),\n  countSummary: PropTypes.string,\n  withComponent: PropTypes.string.isRequired\n}\n\nReactionTopMostIcon.displayName = 'ReactionTopMostIcon'\n\nexport default ReactionTopMostIcon\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport { REACTIONS } from '../actions'\nimport StyledTooltip from './StyledTooltip'\nimport appConst from '../utils/constants'\nimport cssConst from '../styles/constants'\nimport { displayInlineBlock } from '../styles/page'\nimport {\n  styledTooltipOverrideStyle,\n  getIconSize,\n  reactionIconBaseStyle,\n  reactionIconSummaryStyle,\n  reactionIconStyle\n} from '../styles/post'\n\nconst {\n  component: { COMMENT }\n} = appConst\n\nconst ReactionSecondMostIconWrapper = styled.div`\n  ${styledTooltipOverrideStyle}\n  ${props => getIconSize(props.withComponent)}\n  ${props => props.withComponent === COMMENT && displayInlineBlock}\n  ${props => props.withComponent === COMMENT && 'border-right: 2px solid #fff;'}\n  position: relative;\n  margin-left: -2px;\n  z-index: 2;\n  vertical-align: top;\n`\n\nconst SecondMostIcon = styled.i`\n  ${reactionIconBaseStyle}\n  ${reactionIconSummaryStyle}\n  ${props => reactionIconStyle(props.reactFeeling, props.withComponent)}\n`\n\nconst tooltipId = 'tip-for-post-second-most-reaction'\n\nconst ReactionSecondMostIcon = ({\n  reactFeeling,\n  withComponent,\n  countSummary\n}) => {\n  return (\n    <ReactionSecondMostIconWrapper\n      data-for={tooltipId}\n      data-tip={countSummary}\n      withComponent={withComponent}\n    >\n      <SecondMostIcon\n        reactFeeling={reactFeeling}\n        withComponent={withComponent}\n      />\n      {countSummary.length > 0 && (\n        <StyledTooltip\n          id={tooltipId}\n          effect=\"solid\"\n          multiline\n          bg={cssConst.tooltipBackgroundBlack}\n        />\n      )}\n    </ReactionSecondMostIconWrapper>\n  )\n}\n\nReactionSecondMostIcon.defaultProps = {\n  reactFeeling: REACTIONS.HAHA,\n  countSummary: ''\n}\n\nReactionSecondMostIcon.propTypes = {\n  reactFeeling: PropTypes.oneOf(Object.keys(REACTIONS)),\n  withComponent: PropTypes.string.isRequired,\n  countSummary: PropTypes.string\n}\n\nReactionSecondMostIcon.displayName = 'ReactionSecondMostIcon'\n\nexport default ReactionSecondMostIcon\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport { REACTIONS } from '../actions'\nimport StyledTooltip from './StyledTooltip'\nimport appConst from '../utils/constants'\nimport cssConst from '../styles/constants'\nimport { displayInlineBlock } from '../styles/page'\nimport {\n  styledTooltipOverrideStyle,\n  getIconSize,\n  reactionIconBaseStyle,\n  reactionIconSummaryStyle,\n  reactionIconStyle\n} from '../styles/post'\n\nconst {\n  component: { COMMENT }\n} = appConst\n\nconst ReactionThirdMostIconWrapper = styled.div`\n  ${styledTooltipOverrideStyle}\n  ${props => getIconSize(props.withComponent)}\n  ${props => props.withComponent === COMMENT && displayInlineBlock}\n  ${props => props.withComponent === COMMENT && 'border-right: 2px solid #fff;'}\n  position: relative;\n  margin-left: -2px;\n  margin-right: 2px;\n  z-index: 1;\n  vertical-align: top;\n`\n\nconst ThirdMostIcon = styled.i`\n  ${reactionIconBaseStyle}\n  ${reactionIconSummaryStyle}\n  ${props => reactionIconStyle(props.reactFeeling, props.withComponent)}\n`\n\nconst tooltipId = 'tip-for-post-third-most-reaction'\n\nconst ReactionThirdMostIcon = ({\n  reactFeeling,\n  withComponent,\n  countSummary\n}) => {\n  return (\n    <ReactionThirdMostIconWrapper\n      data-for={tooltipId}\n      data-tip={countSummary}\n      withComponent={withComponent}\n    >\n      <ThirdMostIcon\n        reactFeeling={reactFeeling}\n        withComponent={withComponent}\n      />\n      {countSummary.length > 0 && (\n        <StyledTooltip\n          id={tooltipId}\n          effect=\"solid\"\n          multiline\n          bg={cssConst.tooltipBackgroundBlack}\n        />\n      )}\n    </ReactionThirdMostIconWrapper>\n  )\n}\n\nReactionThirdMostIcon.defaultProps = {\n  reactFeeling: REACTIONS.LOVE,\n  countSummary: ''\n}\n\nReactionThirdMostIcon.propTypes = {\n  reactFeeling: PropTypes.oneOf(Object.keys(REACTIONS)),\n  withComponent: PropTypes.string.isRequired,\n  countSummary: PropTypes.string\n}\n\nReactionThirdMostIcon.displayName = 'ReactionThirdMostIcon'\n\nexport default ReactionThirdMostIcon\n","import React from 'react'\nimport { PropTypes } from 'prop-types'\nimport styled from 'styled-components'\nimport StyledTooltip from './StyledTooltip'\nimport cssConst from '../styles/constants'\nimport { styledTooltipOverrideStyle } from '../styles/post'\n\nconst FeedbackCountWrapper = styled.span`\n  display: block;\n  line-height: 16px;\n  max-height: 16px;\n  cursor: pointer;\n  &:hover {\n    text-decoration: underline;\n  }\n  ${styledTooltipOverrideStyle}\n`\n\nconst FeedbackCount = ({ forTip, forText, type }) => {\n  const tooltipId = `tip-for-post-${type.toLowerCase()}-count`\n  return (\n    <FeedbackCountWrapper data-for={tooltipId} data-tip={forTip}>\n      {forText}\n      <StyledTooltip\n        id={tooltipId}\n        effect=\"solid\"\n        multiline\n        bg={cssConst.tooltipBackgroundBlack}\n      />\n    </FeedbackCountWrapper>\n  )\n}\n\nFeedbackCount.displayName = 'FeedbackCount'\n\nFeedbackCount.propTypes = {\n  forTip: PropTypes.string.isRequired,\n  forText: PropTypes.string.isRequired,\n  type: PropTypes.string\n}\n\nFeedbackCount.defaultProps = {\n  type: 'reaction'\n}\n\nexport default FeedbackCount\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport { displayFlex, alignCenter } from '../styles'\nimport { styledTooltipOverrideStyle } from '../styles/post'\nimport appConst from '../utils/constants'\nimport dataSummary from '../utils/dataSummary'\nimport FeedbackCount from './FeedbackCount'\nimport ReactionTopMostIcon from './ReactionTopMostIcon'\nimport ReactionSecondMostIcon from './ReactionSecondMostIcon'\nimport ReactionThirdMostIcon from './ReactionThirdMostIcon'\nimport useDataInit from '../hooks/useDataInit'\n\nconst ReactionSummaryWrapper = styled.div`\n  ${displayFlex}\n  ${alignCenter}\n  ${styledTooltipOverrideStyle}\n  font-size: 14px;\n  min-width: 100px;\n`\n\nconst withComponent = appConst.component.DEFAULT\n\nconst ReactionSummary = ({ reactionIds, reactions }) => {\n  // Detect reactionIds has initial data loaded,\n  // and set a context state to tell other component\n  useDataInit(reactionIds)\n  const reactionArray = reactionIds.map(id => reactions[id])\n  const reactionSummary = dataSummary.getReactionSummary(reactionArray)\n  return reactionSummary === '' ? null : (\n    <ReactionSummaryWrapper>\n      <ReactionTopMostIcon\n        reactFeeling={reactionSummary.topMost.feeling}\n        withComponent={withComponent}\n        countSummary={reactionSummary.topMostTip}\n      />\n      {reactionSummary.secondMost.total > 0 && (\n        <ReactionSecondMostIcon\n          reactFeeling={reactionSummary.secondMost.feeling}\n          withComponent={withComponent}\n          countSummary={reactionSummary.secondMostTip}\n        />\n      )}\n      {reactionSummary.thirdMost.total > 0 && (\n        <ReactionThirdMostIcon\n          reactFeeling={reactionSummary.thirdMost.feeling}\n          withComponent={withComponent}\n          countSummary={reactionSummary.thirdMostTip}\n        />\n      )}\n      <FeedbackCount\n        forText={reactionSummary.all.forText}\n        forTip={reactionSummary.all.forTip}\n      />\n    </ReactionSummaryWrapper>\n  )\n}\n\nReactionSummary.propTypes = {\n  reactionIds: PropTypes.arrayOf(PropTypes.string),\n  reactions: PropTypes.shape({\n    id: PropTypes.string,\n    user: PropTypes.shape({\n      id: PropTypes.string,\n      profileName: PropTypes.string,\n      profileLink: PropTypes.string,\n      profileImg: PropTypes.string\n    }),\n    feeling: PropTypes.string,\n    targetId: PropTypes.string\n  })\n}\n\nReactionSummary.defaultProps = {\n  reactionIds: [],\n  reactions: {}\n}\n\nexport default ReactionSummary\n","import { useEffect } from 'react'\nimport { useContextState } from '../containers/StateProvider'\n\nexport default data => {\n  const { isDataInit, setDataInit } = useContextState()\n  useEffect(() => {\n    if (data.length > 1) setDataInit(true)\n    return () => {\n      setDataInit(false)\n    }\n  }, [data, setDataInit])\n\n  return { isDataInit }\n}\n","import { connect } from 'react-redux'\nimport { getReactionIds, getReactions } from '../reducers/selector'\nimport ReactionSummary from '../components/ReactionSummary'\n\nconst mapStateToProps = state => {\n  return {\n    reactionIds: getReactionIds(state),\n    reactions: getReactions(state)\n  }\n}\n\nexport default connect(mapStateToProps)(ReactionSummary)\n","import React from 'react'\nimport { PropTypes } from 'prop-types'\nimport styled from 'styled-components'\nimport { displayFlex } from '../styles'\nimport textFormat from '../utils/textFormat'\nimport FeedbackCount from './FeedbackCount'\n\nconst summaryFeedbacks = (feedbacks, type) => {\n  const summary = {\n    forText: '',\n    forTip: ''\n  }\n  summary.forText = textFormat.getFeedbacksCount(feedbacks, type)\n  summary.forTip = textFormat.getFeedbacksCountTip(feedbacks, 18)\n  return summary\n}\n\nconst CommentAndShareSummaryWrapper = styled.div`\n  ${displayFlex}\n  font-size: 14px;\n`\n\nconst SharesWrapper = styled.div`\n  margin-left: 8px;\n`\n\nconst CommentAndShareSummary = ({ commentIds, comments, shareIds, shares }) => {\n  const commentArray = commentIds.map(id => comments[id])\n  const shareArray = shareIds.map(id => shares[id])\n  const commentsSummary = summaryFeedbacks(commentArray, 'comment')\n  const sharesSummary = summaryFeedbacks(shareArray, 'share')\n  return (\n    <CommentAndShareSummaryWrapper>\n      <FeedbackCount\n        forText={commentsSummary.forText}\n        forTip={commentsSummary.forTip}\n        type=\"comment\"\n      />\n      <SharesWrapper>\n        <FeedbackCount\n          forText={sharesSummary.forText}\n          forTip={sharesSummary.forTip}\n          type=\"share\"\n        />\n      </SharesWrapper>\n    </CommentAndShareSummaryWrapper>\n  )\n}\n\nCommentAndShareSummary.propTypes = {\n  commentIds: PropTypes.arrayOf(PropTypes.string),\n  comments: PropTypes.shape({\n    id: PropTypes.string,\n    user: PropTypes.shape({\n      profileName: PropTypes.string,\n      profileLink: PropTypes.string,\n      profileImg: PropTypes.string,\n      isVerified: PropTypes.bool\n    }),\n    isHidden: PropTypes.bool,\n    saying: PropTypes.string,\n    attachMedia: PropTypes.string\n  }),\n  shareIds: PropTypes.arrayOf(PropTypes.string),\n  shares: PropTypes.PropTypes.shape({\n    id: PropTypes.string,\n    user: PropTypes.shape({\n      profileName: PropTypes.string,\n      profileLink: PropTypes.string,\n      profileImg: PropTypes.string,\n      isVerified: PropTypes.bool\n    })\n  })\n}\n\nCommentAndShareSummary.defaultProps = {\n  commentIds: [],\n  comments: {},\n  shareIds: [],\n  shares: {}\n}\n\nexport default CommentAndShareSummary\n","import { connect } from 'react-redux'\nimport {\n  getCommentIds,\n  getComments,\n  getShareIds,\n  getShares\n} from '../reducers/selector'\nimport CommentAndShareSummary from '../components/CommentAndShareSummary'\n\nconst mapStateToProps = state => {\n  return {\n    commentIds: getCommentIds(state),\n    comments: getComments(state),\n    shareIds: getShareIds(state),\n    shares: getShares(state)\n  }\n}\n\nexport default connect(mapStateToProps)(CommentAndShareSummary)\n","import React from 'react'\nimport styled from 'styled-components'\nimport cssConst from '../styles/constants'\nimport { displayFlex, justifyContentSpaceBetween } from '../styles/page'\nimport DisplayReactSummary from '../containers/DisplayReactSummary'\nimport DisplayCommentAndShareSummary from '../containers/DisplayCommentAndShareSummary'\n\nconst FeedbackSummaryWrapper = styled.div`\n  ${displayFlex}\n  ${justifyContentSpaceBetween}\n  color: ${cssConst.infoColorGray}\n  border-bottom: ${cssConst.postSectionBorder};\n  margin: 10px 12px 0 12px;\n  padding: 0 0 10px 0;\n`\n\nconst FeedbackSummary = () => {\n  return (\n    <FeedbackSummaryWrapper>\n      <DisplayReactSummary />\n      <DisplayCommentAndShareSummary />\n    </FeedbackSummaryWrapper>\n  )\n}\n\nFeedbackSummary.displayName = 'FeedbackSummary'\n\nexport default FeedbackSummary\n"],"sourceRoot":""}