{"version":3,"sources":["components/FeedbackCount.js","components/ReactionSummary.js","containers/DisplayReactSummary.js","components/CommentAndShareSummary.js","containers/DisplayCommentAndShareSummary.js","components/FeedbackSummary.js"],"names":["FeedbackCountWrapper","styled","span","styledTooltipOverrideStyle","displayBlock","FeedbackCount","forTip","forText","type","tooltipId","toLowerCase","data-for","data-tip","StyledTooltip","id","effect","multiline","displayName","defaultProps","ReactionSummaryWrapper","div","isFetching","displayFlex","alignCenter","withComponent","appConst","component","DEFAULT","ReactionSummary","reactionIds","reactions","reactionArray","map","reactionSummary","dataSummary","getReactionSummary","length","ReactionTopMostIcon","reactFeeling","topMost","feeling","countSummary","topMostTip","secondMost","total","ReactionSecondMostIcon","secondMostTip","thirdMost","ReactionThirdMostIcon","thirdMostTip","all","connect","state","getReactionIsFetching","getReactionIds","getReactions","summaryFeedbacks","feedbacks","summary","textFormat","getFeedbacksCount","getFeedbacksCountTip","CommentAndShareSummaryWrapper","SharesWrapper","CommentAndShareSummary","commentIds","comments","shareIds","shares","commentArray","shareArray","commentsSummary","sharesSummary","getCommentIsFetching","getShareIsFetching","getCommentIds","getComments","getShareIds","getShares","FeedbackSummaryWrapper","justifyContentSpaceBetween","cssConst","infoColorGray","postSectionBorder","FeedbackSummary","DisplayReactSummary","DisplayCommentAndShareSummary"],"mappings":"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","file":"static/js/5.08b2cbe5.chunk.js","sourcesContent":["import React from 'react'\nimport { PropTypes } from 'prop-types'\nimport styled from 'styled-components'\nimport StyledTooltip from './StyledTooltip'\nimport { displayBlock } from '../styles'\nimport { styledTooltipOverrideStyle } from '../styles/post'\n\nconst FeedbackCountWrapper = styled.span`\n  ${styledTooltipOverrideStyle}\n  ${displayBlock}\n  line-height: 16px;\n  max-height: 16px;\n  cursor: pointer;\n  &:hover {\n    text-decoration: underline;\n  }\n`\n\nconst FeedbackCount = ({ forTip, forText, type }) => {\n  const tooltipId = `tip-for-post-${type.toLowerCase()}-count`\n  return (\n    <FeedbackCountWrapper data-for={tooltipId} data-tip={forTip}>\n      {forText}\n      <StyledTooltip id={tooltipId} effect=\"solid\" multiline />\n    </FeedbackCountWrapper>\n  )\n}\n\nFeedbackCount.displayName = 'FeedbackCount'\n\nFeedbackCount.propTypes = {\n  forTip: PropTypes.string.isRequired,\n  forText: PropTypes.string.isRequired,\n  type: PropTypes.string\n}\n\nFeedbackCount.defaultProps = {\n  type: 'reaction'\n}\n\nexport default FeedbackCount\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport { displayFlex, alignCenter } from '../styles'\nimport { styledTooltipOverrideStyle } from '../styles/post'\nimport appConst from '../utils/constants'\nimport dataSummary from '../utils/dataSummary'\nimport FeedbackCount from './FeedbackCount'\nimport ReactionTopMostIcon from './ReactionTopMostIcon'\nimport ReactionSecondMostIcon from './ReactionSecondMostIcon'\nimport ReactionThirdMostIcon from './ReactionThirdMostIcon'\n\nconst ReactionSummaryWrapper = styled.div`\n  ${({ isFetching }) => isFetching && 'display: none;'}\n  ${displayFlex}\n  ${alignCenter}\n  ${styledTooltipOverrideStyle}\n  min-width: 100px;\n`\n\nconst withComponent = appConst.component.DEFAULT\n\nconst ReactionSummary = ({ isFetching, reactionIds, reactions }) => {\n  const reactionArray = reactionIds.map(id => reactions[id])\n  const reactionSummary = dataSummary.getReactionSummary(reactionArray)\n  return (\n    reactionIds.length > 0 && (\n      <ReactionSummaryWrapper isFetching={isFetching}>\n        <ReactionTopMostIcon\n          reactFeeling={reactionSummary.topMost.feeling}\n          withComponent={withComponent}\n          countSummary={reactionSummary.topMostTip}\n        />\n        {reactionSummary.secondMost.total > 0 && (\n          <ReactionSecondMostIcon\n            reactFeeling={reactionSummary.secondMost.feeling}\n            withComponent={withComponent}\n            countSummary={reactionSummary.secondMostTip}\n          />\n        )}\n        {reactionSummary.thirdMost.total > 0 && (\n          <ReactionThirdMostIcon\n            reactFeeling={reactionSummary.thirdMost.feeling}\n            withComponent={withComponent}\n            countSummary={reactionSummary.thirdMostTip}\n          />\n        )}\n        <FeedbackCount\n          forText={reactionSummary.all.forText}\n          forTip={reactionSummary.all.forTip}\n        />\n      </ReactionSummaryWrapper>\n    )\n  )\n}\n\nReactionSummary.propTypes = {\n  isFetching: PropTypes.bool,\n  reactionIds: PropTypes.arrayOf(PropTypes.string),\n  reactions: PropTypes.shape({\n    id: PropTypes.string,\n    user: PropTypes.shape({\n      id: PropTypes.string,\n      profileName: PropTypes.string,\n      profileLink: PropTypes.string,\n      profileImg: PropTypes.string\n    }),\n    feeling: PropTypes.string,\n    targetId: PropTypes.string\n  })\n}\n\nReactionSummary.defaultProps = {\n  isFetching: false,\n  reactionIds: [],\n  reactions: {}\n}\n\nexport default ReactionSummary\n","import { connect } from 'react-redux'\nimport {\n  getReactionIsFetching,\n  getReactionIds,\n  getReactions\n} from '../reducers/selector'\nimport ReactionSummary from '../components/ReactionSummary'\n\nconst mapStateToProps = state => {\n  return {\n    isFetching: getReactionIsFetching(state),\n    reactionIds: getReactionIds(state),\n    reactions: getReactions(state)\n  }\n}\n\nexport default connect(mapStateToProps)(ReactionSummary)\n","import React from 'react'\nimport { PropTypes } from 'prop-types'\nimport styled from 'styled-components'\nimport { displayFlex } from '../styles'\nimport textFormat from '../utils/textFormat'\nimport FeedbackCount from './FeedbackCount'\n\nconst summaryFeedbacks = (feedbacks, type) => {\n  const summary = {\n    forText: '',\n    forTip: ''\n  }\n  summary.forText = textFormat.getFeedbacksCount(feedbacks, type)\n  summary.forTip = textFormat.getFeedbacksCountTip(feedbacks, 18)\n  return summary\n}\n\nconst CommentAndShareSummaryWrapper = styled.div`\n  ${({ isFetching }) => isFetching && 'display: none;'}\n  ${displayFlex}\n`\n\nconst SharesWrapper = styled.div`\n  margin-left: 8px;\n`\n\nconst CommentAndShareSummary = ({\n  isFetching,\n  commentIds,\n  comments,\n  shareIds,\n  shares\n}) => {\n  const commentArray = commentIds.map(id => comments[id])\n  const shareArray = shareIds.map(id => shares[id])\n  const commentsSummary = summaryFeedbacks(commentArray, 'comment')\n  const sharesSummary = summaryFeedbacks(shareArray, 'share')\n  return (\n    <CommentAndShareSummaryWrapper isFetching={isFetching}>\n      <FeedbackCount\n        forText={commentsSummary.forText}\n        forTip={commentsSummary.forTip}\n        type=\"comment\"\n      />\n      <SharesWrapper>\n        <FeedbackCount\n          forText={sharesSummary.forText}\n          forTip={sharesSummary.forTip}\n          type=\"share\"\n        />\n      </SharesWrapper>\n    </CommentAndShareSummaryWrapper>\n  )\n}\n\nCommentAndShareSummary.propTypes = {\n  isFetching: PropTypes.bool,\n  commentIds: PropTypes.arrayOf(PropTypes.string),\n  comments: PropTypes.shape({\n    id: PropTypes.string,\n    user: PropTypes.shape({\n      profileName: PropTypes.string,\n      profileLink: PropTypes.string,\n      profileImg: PropTypes.string,\n      isVerified: PropTypes.bool\n    }),\n    isHidden: PropTypes.bool,\n    saying: PropTypes.string,\n    attachMedia: PropTypes.string\n  }),\n  shareIds: PropTypes.arrayOf(PropTypes.string),\n  shares: PropTypes.PropTypes.shape({\n    id: PropTypes.string,\n    user: PropTypes.shape({\n      profileName: PropTypes.string,\n      profileLink: PropTypes.string,\n      profileImg: PropTypes.string,\n      isVerified: PropTypes.bool\n    })\n  })\n}\n\nCommentAndShareSummary.defaultProps = {\n  isFetching: false,\n  commentIds: [],\n  comments: {},\n  shareIds: [],\n  shares: {}\n}\n\nexport default CommentAndShareSummary\n","import { connect } from 'react-redux'\nimport {\n  getCommentIsFetching,\n  getShareIsFetching,\n  getCommentIds,\n  getComments,\n  getShareIds,\n  getShares\n} from '../reducers/selector'\nimport CommentAndShareSummary from '../components/CommentAndShareSummary'\n\nconst mapStateToProps = state => {\n  return {\n    isFetching: getCommentIsFetching(state) || getShareIsFetching(state),\n    commentIds: getCommentIds(state),\n    comments: getComments(state),\n    shareIds: getShareIds(state),\n    shares: getShares(state)\n  }\n}\n\nexport default connect(mapStateToProps)(CommentAndShareSummary)\n","import React from 'react'\nimport styled from 'styled-components'\nimport cssConst from '../styles/constants'\nimport { displayFlex, justifyContentSpaceBetween } from '../styles/page'\nimport DisplayReactSummary from '../containers/DisplayReactSummary'\nimport DisplayCommentAndShareSummary from '../containers/DisplayCommentAndShareSummary'\n\nconst FeedbackSummaryWrapper = styled.div`\n  ${displayFlex}\n  ${justifyContentSpaceBetween}\n  color: ${cssConst.infoColorGray}\n  border-bottom: ${cssConst.postSectionBorder};\n  margin: 10px 12px 0 12px;\n  padding: 0 0 10px 0;\n`\n\nconst FeedbackSummary = () => {\n  return (\n    <FeedbackSummaryWrapper>\n      <DisplayReactSummary />\n      <DisplayCommentAndShareSummary />\n    </FeedbackSummaryWrapper>\n  )\n}\n\nFeedbackSummary.displayName = 'FeedbackSummary'\n\nexport default FeedbackSummary\n"],"sourceRoot":""}