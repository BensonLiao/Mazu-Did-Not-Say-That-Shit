{"version":3,"sources":["components/FeedbackCount.js","components/ReactionSummary.js","containers/DisplayReactSummary.js","components/CommentAndShareSummary.js","containers/DisplayCommentAndShareSummary.js","components/FeedbackSummary.js"],"names":["FeedbackCountWrapper","styled","span","_templateObject","styledTooltipOverrideStyle","displayBlock","FeedbackCount","_ref","forTip","forText","type","tooltipId","concat","toLowerCase","react_default","a","createElement","data-for","data-tip","StyledTooltip","id","effect","multiline","bg","cssConst","tooltipBackgroundBlack","displayName","defaultProps","ReactionSummaryWrapper","div","ReactionSummary_templateObject","isFetching","displayFlex","alignCenter","withComponent","appConst","component","DEFAULT","ReactionSummary","_ref2","reactionIds","reactions","reactionArray","map","reactionSummary","dataSummary","getReactionSummary","length","ReactionTopMostIcon","reactFeeling","topMost","feeling","countSummary","topMostTip","secondMost","total","ReactionSecondMostIcon","secondMostTip","thirdMost","ReactionThirdMostIcon","thirdMostTip","components_FeedbackCount","all","connect","state","getReactionIsFetching","getReactionIds","getReactions","summaryFeedbacks","feedbacks","summary","textFormat","getFeedbacksCount","getFeedbacksCountTip","CommentAndShareSummaryWrapper","CommentAndShareSummary_templateObject","SharesWrapper","_templateObject2","CommentAndShareSummary","commentIds","comments","shareIds","shares","commentArray","shareArray","commentsSummary","sharesSummary","getCommentIsFetching","getShareIsFetching","getCommentIds","getComments","getShareIds","getShares","FeedbackSummaryWrapper","FeedbackSummary_templateObject","justifyContentSpaceBetween","infoColorGray","postSectionBorder","FeedbackSummary","DisplayReactSummary","DisplayCommentAndShareSummary"],"mappings":"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","file":"static/js/5.e889925c.chunk.js","sourcesContent":["import React from 'react'\nimport { PropTypes } from 'prop-types'\nimport styled from 'styled-components'\nimport StyledTooltip from './StyledTooltip'\nimport { cssConst, displayBlock } from '../styles'\nimport { styledTooltipOverrideStyle } from '../styles/post'\n\nconst FeedbackCountWrapper = styled.span`\n  ${styledTooltipOverrideStyle}\n  ${displayBlock}\n  line-height: 16px;\n  max-height: 16px;\n  cursor: pointer;\n  &:hover {\n    text-decoration: underline;\n  }\n`\n\nconst FeedbackCount = ({ forTip, forText, type }) => {\n  const tooltipId = `tip-for-post-${type.toLowerCase()}-count`\n  return (\n    <FeedbackCountWrapper data-for={tooltipId} data-tip={forTip}>\n      {forText}\n      <StyledTooltip\n        id={tooltipId}\n        effect=\"solid\"\n        multiline\n        bg={cssConst.tooltipBackgroundBlack}\n      />\n    </FeedbackCountWrapper>\n  )\n}\n\nFeedbackCount.displayName = 'FeedbackCount'\n\nFeedbackCount.propTypes = {\n  forTip: PropTypes.string.isRequired,\n  forText: PropTypes.string.isRequired,\n  type: PropTypes.string\n}\n\nFeedbackCount.defaultProps = {\n  type: 'reaction'\n}\n\nexport default FeedbackCount\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport { displayFlex, alignCenter } from '../styles'\nimport { styledTooltipOverrideStyle } from '../styles/post'\nimport appConst from '../utils/constants'\nimport dataSummary from '../utils/dataSummary'\nimport FeedbackCount from './FeedbackCount'\nimport ReactionTopMostIcon from './ReactionTopMostIcon'\nimport ReactionSecondMostIcon from './ReactionSecondMostIcon'\nimport ReactionThirdMostIcon from './ReactionThirdMostIcon'\n\nconst ReactionSummaryWrapper = styled.div`\n  ${({ isFetching }) => isFetching && 'display: none;'}\n  ${displayFlex}\n  ${alignCenter}\n  ${styledTooltipOverrideStyle}\n  min-width: 100px;\n`\n\nconst withComponent = appConst.component.DEFAULT\n\nconst ReactionSummary = ({ isFetching, reactionIds, reactions }) => {\n  const reactionArray = reactionIds.map(id => reactions[id])\n  const reactionSummary = dataSummary.getReactionSummary(reactionArray)\n  return reactionIds.length > 0 && (\n    <ReactionSummaryWrapper isFetching={isFetching}>\n      <ReactionTopMostIcon\n        reactFeeling={reactionSummary.topMost.feeling}\n        withComponent={withComponent}\n        countSummary={reactionSummary.topMostTip}\n      />\n      {reactionSummary.secondMost.total > 0 && (\n        <ReactionSecondMostIcon\n          reactFeeling={reactionSummary.secondMost.feeling}\n          withComponent={withComponent}\n          countSummary={reactionSummary.secondMostTip}\n        />\n      )}\n      {reactionSummary.thirdMost.total > 0 && (\n        <ReactionThirdMostIcon\n          reactFeeling={reactionSummary.thirdMost.feeling}\n          withComponent={withComponent}\n          countSummary={reactionSummary.thirdMostTip}\n        />\n      )}\n      <FeedbackCount\n        forText={reactionSummary.all.forText}\n        forTip={reactionSummary.all.forTip}\n      />\n    </ReactionSummaryWrapper>\n  )\n}\n\nReactionSummary.propTypes = {\n  isFetching: PropTypes.bool,\n  reactionIds: PropTypes.arrayOf(PropTypes.string),\n  reactions: PropTypes.shape({\n    id: PropTypes.string,\n    user: PropTypes.shape({\n      id: PropTypes.string,\n      profileName: PropTypes.string,\n      profileLink: PropTypes.string,\n      profileImg: PropTypes.string\n    }),\n    feeling: PropTypes.string,\n    targetId: PropTypes.string\n  })\n}\n\nReactionSummary.defaultProps = {\n  isFetching: false,\n  reactionIds: [],\n  reactions: {}\n}\n\nexport default ReactionSummary\n","import { connect } from 'react-redux'\nimport {\n  getReactionIsFetching,\n  getReactionIds,\n  getReactions\n} from '../reducers/selector'\nimport ReactionSummary from '../components/ReactionSummary'\n\nconst mapStateToProps = state => {\n  return {\n    isFetching: getReactionIsFetching(state),\n    reactionIds: getReactionIds(state),\n    reactions: getReactions(state)\n  }\n}\n\nexport default connect(mapStateToProps)(ReactionSummary)\n","import React from 'react'\nimport { PropTypes } from 'prop-types'\nimport styled from 'styled-components'\nimport { displayFlex } from '../styles'\nimport textFormat from '../utils/textFormat'\nimport FeedbackCount from './FeedbackCount'\n\nconst summaryFeedbacks = (feedbacks, type) => {\n  const summary = {\n    forText: '',\n    forTip: ''\n  }\n  summary.forText = textFormat.getFeedbacksCount(feedbacks, type)\n  summary.forTip = textFormat.getFeedbacksCountTip(feedbacks, 18)\n  return summary\n}\n\nconst CommentAndShareSummaryWrapper = styled.div`\n  ${({ isFetching }) => isFetching && 'display: none;'}\n  ${displayFlex}\n`\n\nconst SharesWrapper = styled.div`\n  margin-left: 8px;\n`\n\nconst CommentAndShareSummary = ({\n  isFetching,\n  commentIds,\n  comments,\n  shareIds,\n  shares\n}) => {\n  const commentArray = commentIds.map(id => comments[id])\n  const shareArray = shareIds.map(id => shares[id])\n  const commentsSummary = summaryFeedbacks(commentArray, 'comment')\n  const sharesSummary = summaryFeedbacks(shareArray, 'share')\n  return (\n    <CommentAndShareSummaryWrapper isFetching={isFetching}>\n      <FeedbackCount\n        forText={commentsSummary.forText}\n        forTip={commentsSummary.forTip}\n        type=\"comment\"\n      />\n      <SharesWrapper>\n        <FeedbackCount\n          forText={sharesSummary.forText}\n          forTip={sharesSummary.forTip}\n          type=\"share\"\n        />\n      </SharesWrapper>\n    </CommentAndShareSummaryWrapper>\n  )\n}\n\nCommentAndShareSummary.propTypes = {\n  isFetching: PropTypes.bool,\n  commentIds: PropTypes.arrayOf(PropTypes.string),\n  comments: PropTypes.shape({\n    id: PropTypes.string,\n    user: PropTypes.shape({\n      profileName: PropTypes.string,\n      profileLink: PropTypes.string,\n      profileImg: PropTypes.string,\n      isVerified: PropTypes.bool\n    }),\n    isHidden: PropTypes.bool,\n    saying: PropTypes.string,\n    attachMedia: PropTypes.string\n  }),\n  shareIds: PropTypes.arrayOf(PropTypes.string),\n  shares: PropTypes.PropTypes.shape({\n    id: PropTypes.string,\n    user: PropTypes.shape({\n      profileName: PropTypes.string,\n      profileLink: PropTypes.string,\n      profileImg: PropTypes.string,\n      isVerified: PropTypes.bool\n    })\n  })\n}\n\nCommentAndShareSummary.defaultProps = {\n  isFetching: false,\n  commentIds: [],\n  comments: {},\n  shareIds: [],\n  shares: {}\n}\n\nexport default CommentAndShareSummary\n","import { connect } from 'react-redux'\nimport {\n  getCommentIsFetching,\n  getShareIsFetching,\n  getCommentIds,\n  getComments,\n  getShareIds,\n  getShares\n} from '../reducers/selector'\nimport CommentAndShareSummary from '../components/CommentAndShareSummary'\n\nconst mapStateToProps = state => {\n  return {\n    isFetching: getCommentIsFetching(state) || getShareIsFetching(state),\n    commentIds: getCommentIds(state),\n    comments: getComments(state),\n    shareIds: getShareIds(state),\n    shares: getShares(state)\n  }\n}\n\nexport default connect(mapStateToProps)(CommentAndShareSummary)\n","import React from 'react'\nimport styled from 'styled-components'\nimport cssConst from '../styles/constants'\nimport { displayFlex, justifyContentSpaceBetween } from '../styles/page'\nimport DisplayReactSummary from '../containers/DisplayReactSummary'\nimport DisplayCommentAndShareSummary from '../containers/DisplayCommentAndShareSummary'\n\nconst FeedbackSummaryWrapper = styled.div`\n  ${displayFlex}\n  ${justifyContentSpaceBetween}\n  color: ${cssConst.infoColorGray}\n  border-bottom: ${cssConst.postSectionBorder};\n  margin: 10px 12px 0 12px;\n  padding: 0 0 10px 0;\n`\n\nconst FeedbackSummary = () => {\n  return (\n    <FeedbackSummaryWrapper>\n      <DisplayReactSummary />\n      <DisplayCommentAndShareSummary />\n    </FeedbackSummaryWrapper>\n  )\n}\n\nFeedbackSummary.displayName = 'FeedbackSummary'\n\nexport default FeedbackSummary\n"],"sourceRoot":""}